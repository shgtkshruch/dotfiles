#!/usr/bin/env bash

# Source #{{{
source ~/.awsinit
source ~/.githubinit
#}}}

# docker #{{{
if [ "`boot2docker status`" = "running" ]; then
  $(boot2docker shellinit 2>/dev/null)
fi
#}}}

# bash_prompt #{{{
# Bash prompt customization
# https://gist.github.com/jmblog/d8f73c00f2705717940a

# Check that terminfo exists before changing TERM var to xterm-256color
# Prevents prompt flashing in Mac OS X 10.6 Terminal.app
if [ -e /usr/share/terminfo/x/xterm-256color ]; then
    export TERM='xterm-256color'
fi

# Turn off standout; turn off underline
tput sgr 0 0

# Base styles and color palette
# If you want to check color code, run `./testcolor.sh'
BOLD=$(tput bold)
RESET=$(tput sgr0)
BLACK=$(tput setaf 0)
RED=$(tput setaf 1)
GREEN=$(tput setaf 2)
YELLOW=$(tput setaf 3)
BLUE=$(tput setaf 4)
MAGENTA=$(tput setaf 5)
CYAN=$(tput setaf 6)
WHITE=$(tput setaf 255)
ORANGE=$(tput setaf 172)

style_user="\[${RESET}${ORANGE}\]"
style_host="\[${RESET}${YELLOW}\]"
style_path="\[${RESET}${GREEN}\]"
style_chars="\[${RESET}${WHITE}\]"
style_branch="${CYAN}"

if [[ "$SSH_TTY" ]]; then
    # connected via ssh
    style_host="\[${BOLD}${RED}\]"
elif [[ "$USER" == "root" ]]; then
    # logged in as root
    style_user="\[${BOLD}${RED}\]"
fi

is_git_repo() {
    $(git rev-parse --is-inside-work-tree &> /dev/null)
}

is_git_dir() {
    $(git rev-parse --is-inside-git-dir 2> /dev/null)
}

get_git_branch() {
    local branch_name

    # Get the short symbolic ref
    branch_name=$(git symbolic-ref --quiet --short HEAD 2> /dev/null) ||
    # If HEAD isn't a symbolic ref, get the short SHA
    branch_name=$(git rev-parse --short HEAD 2> /dev/null) ||
    # Otherwise, just give up
    branch_name="(unknown)"

    printf $branch_name
}

# Git status information
prompt_git() {
    local git_info git_state uc us ut st

    if ! is_git_repo || is_git_dir; then
        return 1
    fi

    git_info=$(get_git_branch)

    # Check for uncommitted changes in the index
    if ! $(git diff --quiet --ignore-submodules --cached); then
        uc="+"
    fi

    # Check for unstaged changes
    if ! $(git diff-files --quiet --ignore-submodules --); then
        us="!"
    fi

    # Check for untracked files
    if [ -n "$(git ls-files --others --exclude-standard)" ]; then
        ut="?"
    fi

    # Check for stashed files
    if $(git rev-parse --verify refs/stash &>/dev/null); then
        st="$"
    fi

    git_state=$uc$us$ut$st

    # Combine the branch name and state information
    if [[ $git_state ]]; then
        git_info="$git_info[$git_state]"
    fi

    printf "${WHITE} on ${style_branch}${git_info}"
}


# Set the terminal title to the current working directory
PS1="\[\033]0;\w\007\]"
# Build the prompt
PS1+="\n" # Newline
PS1+="${style_user}\u" # Username
PS1+="${style_chars}@" # @
PS1+="${style_host}\h" # Host
PS1+="${style_chars}: " # :
PS1+="${style_path}\w" # Working directory
PS1+="\$(prompt_git)" # Git details
PS1+="\n" # Newline
PS1+="${style_chars}\$ \[${RESET}\]" # $ (and reset color)
#}}}

# Path #{{{
export PATH="/usr/local/bin:$PATH"

### Homwbrew
export PATH="/usr/local/sbin:$PATH"

### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"

# #}}}

# rbenv #{{{
export PATH="$HOME/.rbenv/bin:$PATH"
eval "$(rbenv init -)"
export PATH="$HOME/.rbenv/shims:$PATH"
#}}}

# Alias #{{{
alias amz="$HOME/bin/aws.sh"
alias ansiblep='ansible-playbook'
alias be='bundle exec'
alias bi='bundle install --path vendor/bundle'
alias bl='bundle list'
alias bo='bundle open'
alias bs='bundle show'
alias bri='brew install'
alias brif='brew info'
alias brl='brew list'
alias brs='brew search'
alias bru='brew update'
alias brug='brew upgrade'
alias brui='brew uninstall'
alias brci='brew cask install'
alias brcif='brew cask info'
alias brcl='brew cask list'
alias brcs='brew cask search'
alias brcui='brew cask uninstall'
alias cdt='cdrmdir'
alias diary="$HOME/bin/diary.sh"
alias gs='gitsh'
alias gi='git_init_create_commit'
alias ls="ls -GAF"
alias ll="ls -l"
alias mkcd="mkcd"
alias node='node --harmony'
alias pc='peco_cd'
alias ph='peco_history'
alias pg='peco_ghq'
alias rlb='source ~/.bash_profile'
alias sed='gsed'
alias slide="$HOME/bin/slide.sh"
alias sszip="$HOME/bin/zip.sh"
alias ssrar="$HOME/bin/rar.sh"
alias t='trash'
alias vo='peco_vim_open'
alias vg='vagrant'
alias vgi='peco_vagrant_init'
alias vgb='vagrant box'
alias vgba='vagrant box add'
alias vgbl='vagrant box list'
alias vgbrm='vagrant box remove'
alias vgbrp='vagrant box repackage'
alias vgbup='vagrant box update'
alias vgd='vagrant destroy'
alias vggs='vagrant global-status'
alias vgh='vagrant halt'
alias vgp='vagrant provision'
alias vgpi='vagrant plugin install'
alias vgpl='vagrant plugin list'
alias vgplu='vagrant plugin update'
alias vgplui='vagrant plugin uninstall'
alias vgp='vagrant provision'
alias vgrs='vagrant resume'
alias vgrl='vagrant reload'
alias vgrlp='vagrant reload --provision'
alias vgsc='vagrant_sandbox_commit'
alias vgso='vagrant sandbox on'
alias vgsof='vagrant_sandbox_off'
alias vgsr='vagrant sandbox rollback'
alias vgss='vagrant sandbox status'
alias vgssh='vagrant ssh'
alias vgs='vagrant status'
alias vgsu='vagrant suspend'
alias vgsy='vagrant rsync'
alias vgsya='vagrant rsync-auto'
alias vgu='vagrant up'
alias vgup='vagrant up --provision'
#}}}

# Function#{{{
mkcd() {
  mkdir $1
  cd $1
}

cdrmdir() {
  cwd=$(pwd)
  cd ..
  rm -rf $cwd
}
#}}}

# z.sh#{{{
. `brew --prefix`/etc/profile.d/z.sh
function precmd () {
  _z --add "$(pwd -P)"
}
#}}}

# cdでtypoしても自動的に正しいパスに移動#{{{
# ex. cd Document => cd Documents
shopt -s cdspell
#}}}

# History #{{{
# 重複するコマンドを履歴に残さない
export HISTCONTROL=erasedups
# 不要なコマンドを履歴に残さない
export HISTIGNORE="ls:ls *:ll:ll *:cd:cd -:pwd:vim:z *:exit:ph:history:t *"
# コマンド履歴を増やす
export HISTFILESIZE=10000
export HISTSIZE=10000
#}}}

# Application#{{{
# aws-cli
complete -C aws_completer aws
#}}}

# bash-completion #{{{

# bash-completion1.3
if [ -f $(brew --prefix)/etc/bash_completion ]; then
  . $(brew --prefix)/etc/bash_completion
fi
#}}}

# git#{{{
function u() {
    cd ./$(git rev-parse --show-cdup)
    if [ $# = 1 ]; then
        cd $1
    fi
}

function git_init_create_commit() {
  git init
  git create
  git add .
  git commit -m'Initial commit'
}
#}}}

# hub#{{{
eval "$(hub alias -s)"
#}}}

# vagrant#{{{

function vagrant_sandbox_commit {
  vagrant suspend
  vagrant sandbox commit
  vagrant up
}

function vagrant_sandbox_off {
  vagrant suspend
  vagrant sandbox off
  vagrant up
}
#}}}

# peco #{{{

function peco_cd () {
  cd $(ls -a | peco)
}

function peco_ghq () {
  cd $(ghq list --full-path | peco)
}

function peco_history () {
  # history | sort -r | sed -re 's/^\s+[0-9]+\s{2}//' | peco | bash
  $(history | sort -r | sed -re 's/^\s+[0-9]+\s{2}//' | awk '!a[$0]++' | peco)
}

function peco_vim_open () {
  vim $(git ls | peco)
}

function peco_vagrant_init () {
  vagrant init $(vagrant box list | peco)
}

function get_vpc_id () {
  aws ec2 describe-vpcs | peco | awk '{print $7}'
}

function get_subnet_id_from_vpc_id () {
  aws ec2 describe-subnets | awk -v vpc_id=$(get_vpc_id) '{ if ($9 == vpc_id) print $8 }'
}

function aws_delete_vpc () {
  local vpc_id=$(get_vpc_id)
  aws ec2 delete-vpc --vpc-id $vpc_id
}

function aws_delete_subnets () {
  local subent_ids=$(get_subnet_id_from_vpc_id)
  aws ec2 delete-subnet --subnet-id $subent_ids
}

alias adv='aws_delete_vpc'
alias as='get_subnet_id_from_vpc_id'
#}}}

