set nocompatible

" vim-plug {{{

" Automatic installation vim-plug
if empty(glob('~/.vim/autoload/plug.vim'))
  silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
        \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif



call plug#begin('~/.vim/plugged')

" syntax
Plug 'Shougo/context_filetype.vim'
Plug 'othree/html5.vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'cakebaker/scss-syntax.vim'
Plug 'wavded/vim-stylus'
Plug 'tpope/vim-haml'
Plug 'slim-template/vim-slim'
Plug 'pangloss/vim-javascript'
Plug 'elzr/vim-json'
Plug 'kchmck/vim-coffee-script'
Plug 'posva/vim-vue'
Plug 'StanAngeloff/php.vim'
Plug 'nono/vim-handlebars'
Plug 'tpope/vim-markdown'
Plug 'tpope/vim-rails'
Plug 'vim-ruby/vim-ruby'

Plug 'digitaltoad/vim-pug'
let g:vim_json_syntax_conceal = 0

Plug 'mxw/vim-jsx'
let g:jsx_ext_required = 0

Plug '2072/PHP-Indenting-for-Vim'
let g:PHP_default_indenting = 0

Plug 'tpope/vim-bundler'
nnoremap <Space>bo :Bopen<CR>
nnoremap <Space>bs :Bsplit<CR>
nnoremap <Space>bv :Bvsplit<CR>



"text-object
Plug 'kana/vim-textobj-user'
Plug 'kana/vim-textobj-fold'
Plug 'thinca/vim-textobj-between'
Plug 'glts/vim-textobj-comment'
Plug 'kana/vim-textobj-function'
Plug 'Julian/vim-textobj-brace'
Plug 'kana/vim-textobj-line'
Plug 'saihoooooooo/vim-textobj-space'
Plug 'kana/vim-textobj-syntax'
Plug 'lucapette/vim-textobj-underscore'
Plug 'kana/vim-textobj-indent'
Plug 'mattn/vim-textobj-url'
Plug 'akiyan/vim-textobj-php'
Plug 'bps/vim-textobj-python'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'vimtaku/vim-textobj-sigil'



Plug 'altercation/vim-colors-solarized'
Plug 'w0rp/ale'
Plug 'tomtom/tcomment_vim'
Plug 'kana/vim-submode'
Plug 'jiangmiao/auto-pairs'
Plug 'tpope/vim-endwise'
Plug 'cohama/agit.vim'
Plug 'tpope/vim-surround'
Plug 'ntpeters/vim-better-whitespace'
Plug 'editorconfig/editorconfig-vim'
Plug 'Yggdroot/indentLine'
Plug 'jiangmiao/auto-pairs'
Plug 'christoomey/vim-tmux-navigator'
Plug 'Shougo/vimproc', { 'do': 'make' }



Plug 'vim-jp/vimdoc-ja'

set helplang=ja,en " :help コマンドで日本語の優先順位をあげる。英語ヘルプを読みたい場合は :help @en



Plug 'mattn/emmet-vim'

let g:use_emmet_complete_tag = 1
let g:user_emmet_settings = {
      \ 'variables': {
      \   'lang': 'ja'
      \  }
      \}



Plug 'junegunn/fzf', { 'dir': '~/.fzf', 'do': './install --all' }
Plug 'junegunn/fzf.vim'

nnoremap <C-f> :GFiles<Enter>
nnoremap <C-r> :Rg!<Enter>

command! -bang -nargs=* Rg
  \ call fzf#vim#grep(
  \   'rg --column --line-number --no-heading --color=always --smart-case '.shellescape(<q-args>), 1,
  \   <bang>0 ? fzf#vim#with_preview('up:60%')
  \           : fzf#vim#with_preview('right:50%:hidden', '?'),
  \   <bang>0)



Plug 'gcmt/wildfire.vim'

let g:wildfire_fuel_map = '<Enter>'
let g:wildfire_water_map = '<BS>'



Plug 'gorkunov/smartpairs.vim'

"Key for running smartpairs in all modes (select/delete/change/yank)
"default is 'v'
let g:smartpairs_key = 'v'

"Key for running smartpairs in the selection mode
"(extend current selection to the next pairs)
"default is 'v'
let g:smartpairs_nextpairs_key = 'v'

"Enable 'uber mode' (see above)
"default is 1
let g:smartpairs_uber_mode = 1

"Start selection from word
"If there is no regions then select word
"default is 0
let g:smartpairs_start_from_word = 1

"Key for running smartpairs in the selection mode
"for extending selection with IN-mod (like vi")
"default is 'm'
let g:smartpairs_nextpairs_key_i = 'm'

"Key for running smartpairs in the selection mode
"for extending selection with ABOVE-mod (like va")
"default is 'M'
let g:smartpairs_nextpairs_key_a = 'M'

"Keys combination for canceling last smartpais selection
"default is '<C-V>' Ctrl+Shift+v
"under macvim you can use Cmd key e.g. <D-V> -> Cmd+Shift+v
let g:smartpairs_revert_key = '<C-V>'

"Smartpairs works only with 20 lines before cursor position
"but you can changes this limit:
let g:smartpairs_maxdepth = 20



Plug 'osyo-manga/vim-over'

" http://qiita.com/syui/items/3a1af1301ee197b32a8a

" vim-overを起動
nnoremap <Space>oc :OverCommandLine<CR>%s/

" カーソル下の単語をハイライト付きで置換
nnoremap <Space>ss :OverCommandLine<CR>%s/<C-r><C-w>//gI<Left><Left><Left>

" コピーした文字列をハイライト付きで置換
nnoremap <Space>sp y:OverCommandLine<CR>%s!<C-r>=substitute(@0, '!', '\\!', 'g')<CR>!!gI<Left><Left><Left>



Plug 'Lokaltog/vim-easymotion'

noremap [easymotion] <Nop>
map ; [easymotion]
map [easymotion] <Plug>(easymotion-prefix)

" n-character search motion
map  [easymotion]/ <Plug>(easymotion-sn)
omap [easymotion]/ <Plug>(easymotion-tn)
map  [easymotion]n <Plug>(easymotion-next)
map  [easymotion]N <Plug>(easymotion-prev)

" ホームポジションに近いキーを使う
let g:EasyMotion_keys='hjklasdfgyuiopqwertnmzxcvbHJKLASDFGYUIOPQWERTNMZXCVB'

" 「;」 + 何かにマッピング
let g:EasyMotion_leader_key=";"

" 1 ストローク選択を優先する
let g:EasyMotion_grouping=1

" v will match both v and V, but V will match V only
let g:EasyMotion_use_smartsign_us = 1 " US layout

" match multibyte Japanese characters with alphabetical input
let g:EasyMotion_use_migemo = 1



Plug 'haya14busa/incsearch.vim'

set hlsearch

let g:incsearch#auto_nohlsearch = 1
let g:incsearch#emacs_like_keymap = 1

map /  <Plug>(incsearch-forward)
map ?  <Plug>(incsearch-backward)
map g/ <Plug>(incsearch-stay)
map n  <Plug>(incsearch-nohl-n)
map N  <Plug>(incsearch-nohl-N)
map *  <Plug>(incsearch-nohl-*)
map #  <Plug>(incsearch-nohl-#)
map g* <Plug>(incsearch-nohl-g*)
map g# <Plug>(incsearch-nohl-g#)



Plug 'rhysd/clever-f.vim'

" 行をまたいで検索しない
let g:clever_f_across_no_line = 1

" 大文字を入力した時のみ大文字小文字を区別
let g:clever_f_smart_case = 1

" for Japanese
let g:clever_f_use_migemo = 1

" f と F の検索方向を固定する(f は必ず右方向に移動，F は必ず左方向に移動)
let g:clever_f_fix_key_direction = 1

" f; で任意の記号にマッチ
let g:clever_f_chars_match_any_signs = ';'



Plug 'Shougo/vimfiler' | Plug 'Shougo/unite.vim'

noremap <Space>vf :VimFiler<CR>

" セーフモードをデフォルトで解除
let g:vimfiler_safe_mode_by_default = 0

" Edit file by tabedit.
let g:vimfiler_edit_action = 'open'

" Like Textmate icons.
let g:vimfiler_tree_leaf_icon = ' '
let g:vimfiler_tree_opened_icon = '▾'
let g:vimfiler_tree_closed_icon = '▸'
let g:vimfiler_file_icon = '-'
let g:vimfiler_marked_file_icon = '*'



Plug 'Shougo/vimshell'

nnoremap <Space>vs :VimShell<CR>
nnoremap <Space>vsc :VimShellBufferDir<CR>
nnoremap <Space>vp :VimShellPop<CR>

" Display command history <C-l> in insert mode.
let g:vimshell_prompt_expr = 'getcwd()." > "'
let g:vimshell_prompt_pattern = '^\f\+ > '



" neocomplete.vim "{{{
Plug 'Shougo/neocomplete.vim'

let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 4
let g:neocomplete#lock_buffer_name_pattern = '\*ku\*'

" Define dictionary.
let g:neocomplete#sources#dictionary#dictionaries = {
      \ 'default' : '',
      \ 'vimshell' : $HOME.'/.vimshell_hist',
      \ 'scheme' : $HOME.'/.gosh_completions'
      \ }

" Plugin key-mappings.
inoremap <expr><C-g> neocomplete#undo_completion()
inoremap <expr><C-l> neocomplete#complete_common_string()

" Recommended key-mappings.
" <CR>: close popup and save indent.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#smart_close_popup() . "\<CR>"
endfunction

" <TAB>: completion.
inoremap <expr><TAB>   pumvisible() ? "\<C-n>" : "\<TAB>"

" <C-h>, <BS>: close popup and delete backword char.
inoremap <expr><C-h> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><BS> neocomplete#smart_close_popup()."\<C-h>"
inoremap <expr><C-y>   neocomplete#close_popup()
inoremap <expr><C-e>   neocomplete#cancel_popup()

" Enable omni completion.
augroup omni_filetype
  autocmd!
  autocmd FileType css,scss,sass setlocal omnifunc=csscomplete#CompleteCSS
  autocmd FileType html,markdown,slim setlocal omnifunc=htmlcomplete#CompleteTags
  autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
  autocmd FileType python setlocal omnifunc=pythoncomplete#Complete
  autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags
augroup END

" Enable heavy omni completion.
if !exists('g:neocomplete#sources#omni#input_patterns')
  let g:neocomplete#sources#omni#input_patterns = {}
endif

" For perlomni.vim setting.
" https://github.com/c9s/perlomni.vim
let g:neocomplete#sources#omni#input_patterns.perl = '\h\w*->\h\w*\|\h\w*::'

" }}}



" neosnippet.vim "{{{
Plug 'Shougo/neosnippet.vim'

" Plugin key-mappings.
imap <C-k> <Plug>(neosnippet_expand_or_jump)
smap <C-k> <Plug>(neosnippet_expand_or_jump)
xmap <C-k> <Plug>(neosnippet_expand_target)

" SuperTab like snippets behavior.
imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: pumvisible() ? "\<C-n>" : "\<TAB>"
smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
      \ "\<Plug>(neosnippet_expand_or_jump)"
      \: "\<TAB>"

" Open vertical split window to edit snippets file
nnoremap <Space>ns :NeoSnippetEdit -vertical -split<CR>

" For snippet_complete marker.
if has('conceal')
  set conceallevel=2 concealcursor=i
endif

" which disables all runtime snippets
let g:neosnippet#disable_runtime_snippets = {
      \   '_' : 1,
      \ }

" Enable snipMate compatibility feature.
let g:neosnippet#enable_snipmate_compatibility = 1

" Tell Neosnippet about the other snippets
let g:neosnippet#snippets_directory='~/.vim/snippets/'
"}}}



Plug 'junegunn/vim-easy-align'

vmap <Space> <Plug>(EasyAlign)



Plug 'tpope/vim-fugitive'

nnoremap <Space>gs :Gstatus<CR>
nnoremap <Space>ga :Git add .<CR>
nnoremap <Space>gc :Git commit<CR>
nnoremap <Space>gca :Git commit --amend<CR>
nnoremap <Space>gp :Gpush origin master<CR>
nnoremap <Space>gbr :Gbrowse<CR>



Plug 'rhysd/committia.vim'

let g:committia_hooks = {}
function! g:committia_hooks.edit_open(info)
  " Additional settings
  setlocal spell

  " If no commit message, start with insert mode
  if a:info.vcs ==# 'git' && getline(1) ==# ''
    startinsert
  end

  " Scroll the diff window from insert mode
  " Map <C-n> and <C-p>
  imap <buffer><C-n> <Plug>(committia-scroll-diff-down-half)
  imap <buffer><C-p> <Plug>(committia-scroll-diff-up-half)
endfunction



Plug 'tyru/open-browser.vim'

" Open URI under cursor.
nnoremap gx <Plug>(openbrowser-smart-search)
vnoremap gx <Plug>(openbrowser-smart-search)

" Search word under cursor.
nnoremap gw <Plug>(openbrowser-search)
vnoremap gw <Plug>(openbrowser-search)



Plug 't9md/vim-choosewin'

nmap - <Plug>(choosewin)

" オーバーレイを使う
let g:choosewin_overlay_enable = 1

" マルチバイトバッファでオーバーレイフォントを崩さないように
let g:choosewin_overlay_clear_multibyte = 1

" tmux の色に雰囲気を合わせる。
let g:choosewin_color_overlay = {
      \ 'gui': ['DodgerBlue3', 'DodgerBlue3' ],
      \ 'cterm': [ 25, 25 ]
      \ }
let g:choosewin_color_overlay_current = {
      \ 'gui': ['firebrick1', 'firebrick1' ],
      \ 'cterm': [ 124, 124 ]
      \ }

" 着地時にカーソル点滅をさせない
let g:choosewin_blink_on_land = 0

" ステータスラインに表示させない
let g:choosewin_statusline_replace = 0



Plug 'AndrewRadev/switch.vim'

nnoremap <Space>s :<C-u>Switch<CR>

let g:switch_custom_definitions =
      \ [
      \   ['left', 'right'],
      \   ['top', 'bottom'],
      \   ['yes', 'no'],
      \   ['jpg', 'png', 'gif'],
      \   ['on', 'off'],
      \ ]

autocmd FileType css,scss,sass,less,styl let b:switch_custom_definitions =
      \ [
      \   ['px', 'em', 'rem'],
      \   ['italic', 'oblique'],
      \   ['bold', 'lighter', 'bolder'],
      \   ['block', 'inline', 'inline-block'],
      \   ['static', 'relative', 'absolute', 'fixed'],
      \   ['visible', 'scroll', 'hidden'],
      \   ['solid', 'double', 'ridge', 'inset', 'outset', 'dashed', 'dotted'],
      \   ['outside', 'inside'],
      \   ['disc', 'circle', 'square', 'lower-roman', 'upper-roman', 'lower-greek', 'decimal', 'decimal-deading-zero', 'lower-latin', 'lower-alpha', 'upper-latin', 'upper-aplpha', 'cjk-ideographic', 'hiragana', 'katakana', 'hiragana-iroha', 'katakana-iroha', 'hebrew', 'armenian', 'georgian'],
      \   ['pointer', 'crosshair', 'move', 'text', 'wait', 'help', 'progress'],
      \ ]



Plug 'thinca/vim-quickrun'

let g:quickrun_config = {
      \ '_': {
      \   'runner': 'vimproc',
      \   'runner/vimproc/updatetime': 60,
      \   'outputter/buffer/split': ':vsplit',
      \   'outputter/buffer/close_on_empty': 1
      \ },
      \ 'html': {
      \   'type': 'html/slim'
      \ },
      \ 'html/slim': {
      \   'command': 'html2slim'
      \ },
      \ 'ruby.rspec' : {
      \   'command': 'rspec',
      \   'cmdopt': 'bundle exec',
      \   'args': '--color',
      \   'exec': '%o %c %s %a'
      \ }
      \}



Plug 'itchyny/calendar.vim'

let g:calendar_google_calendar = 1
let g:calendar_google_task = 1



Plug 'itchyny/lightline.vim'

" http://d.hatena.ne.jp/itchyny/20130828/1377653592
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'mode_map': {'c': 'NORMAL'},
      \ 'active': {
      \   'left': [
      \     ['mode', 'paste'],
      \     ['readonly', 'fugitive', 'filename'],
      \   ],
      \   'right': [
      \     ['lineinfo'],
      \     ['percent'],
      \     ['fileformat', 'fileencoding']
      \   ]
      \ },
      \ 'component_function': {
      \   'modified': 'MyModified',
      \   'readonly': 'MyReadonly',
      \   'fugitive': 'MyFugitive',
      \   'filename': 'MyFilename',
      \   'fileformat': 'MyFileformat',
      \   'filetype': 'MyFiletype',
      \   'fileencoding': 'MyFileencoding',
      \   'mode': 'MyMode',
      \ }
      \}

function! MyModified()
  return &ft =~ 'help\|vimfiler\|gundo' ? '' : &modified ? '+' : &modifiable ? '' : '-'
endfunction

function! MyReadonly()
  return &ft !~? 'help\|vimfiler\|gundo' && &readonly ? 'x' : ''
endfunction

function! MyFilename()
  return ('' != MyReadonly() ? MyReadonly() . ' ' : '') .
        \ (&ft == 'vimfiler' ? vimfiler#get_status_string() :
        \  &ft == 'vimshell' ? vimshell#get_status_string() :
        \ '' != expand('%:t') ? expand('%:t') : '[No Name]') .
        \ ('' != MyModified() ? ' ' . MyModified() : '')
endfunction

function! MyFugitive()
  try
    if &ft !~? 'vimfiler\|gundo' && exists('*fugitive#head')
      return fugitive#head()
    endif
  catch
  endtry
  return ''
endfunction

function! MyFileformat()
  return winwidth(0) > 70 ? &fileformat : ''
endfunction

function! MyFiletype()
  return winwidth(0) > 70 ? (strlen(&filetype) ? &filetype : 'no ft') : ''
endfunction

function! MyFileencoding()
  return winwidth(0) > 70 ? (strlen(&fenc) ? &fenc : &enc) : ''
endfunction

function! MyMode()
  return winwidth(0) > 60 ? lightline#mode() : ''
endfunction

call plug#end()

" }}}

" color scheme {{{

if &t_Co > 1
  syntax enable
endif

set background=dark
set t_Co=256
set laststatus=2
let g:solarized_termcolors=16
let g:solarized_termtrans=1
let g:solarized_bold=1
let g:solarized_underline=1
let g:solarized_italic=1
let g:solarized_contrast="high"
let g:solarized_visibility="high"
colorscheme solarized

" }}}

" submode {{{

" http://d.hatena.ne.jp/thinca/20130131/1359567419
" ウィンドウサイズ変更
call submode#enter_with('bufmove', 'n', '', 's>', '<C-w>>')
call submode#enter_with('bufmove', 'n', '', 's<', '<C-w><')
call submode#enter_with('bufmove', 'n', '', 's+', '<C-w>+')
call submode#enter_with('bufmove', 'n', '', 's-', '<C-w>-')
call submode#map('bufmove', 'n', '', '>', '<C-w>>')
call submode#map('bufmove', 'n', '', '<', '<C-w><')
call submode#map('bufmove', 'n', '', '+', '<C-w>+')
call submode#map('bufmove', 'n', '', '-', '<C-w>-')
" タブの切り替え
call submode#enter_with('changetab', 'n', '', 'sn', 'gt')
call submode#enter_with('changetab', 'n', '', 'sp', 'gT')
call submode#map('changetab', 'n', '', 'n', 'gt')
call submode#map('changetab', 'n', '', 'p', 'gT')
" }}}

" key mapping "{{{

" NORMAL MODE
nnoremap <Space>s. :<C-u>source $MYVIMRC<Enter>
nnoremap <Space>. :<C-u>edit $MYVIMRC<Enter>

nnoremap j gj
nnoremap k gk
nnoremap gj j
nnoremap gk k
noremap <Space>h  ^
noremap <Space>l  $
nnoremap <Space>/  *

" 誤入力防止
nnoremap ZZ <Nop>
nnoremap ZQ <Nop>
nnoremap <Esc><Esc> :nohlsearch<CR>

" insert breack
nnoremap br Ea<br /><ESC>J
nnoremap ibr Ea<CR><ESC>

" F5でファイルを Chrome で開く
nnoremap <F5> :!open -a Google\ Chrome %<CR><CR>
" watchmedo shell-command -c "osascript ~/bin/creload.scpt" ~/blog/

" ウィンドウ
" http://qiita.com/tekkc/items/98adcadfa4bdc8b5a6ca
nnoremap s <Nop> " sキーを無効
nnoremap sj <C-w>j " 下のウィンドウへ移動
nnoremap sk <C-w>k " 上のウィンドウへ移動
nnoremap sl <C-w>l " 右のウィンドウへ移動
nnoremap sh <C-w>h " 左のウィンドウへ移動
nnoremap sw <C-w>w " 次のウィンドウへ移動
nnoremap sJ <C-w>J " ウィンドウを上へ移動
nnoremap sK <C-w>K " ウィンドウを下へ移動
nnoremap sL <C-w>L " ウィンドウを右へ移動
nnoremap sH <C-w>H " ウィンドウを左へ移動
nnoremap sr <C-w>r " ウィンドウを回転
nnoremap s= <C-w>= " ウィンドウの大きさを揃える
nnoremap so <C-w>_<C-w>|
nnoremap ss :<C-u>sp<CR> " ウィンドウを水平分割
nnoremap sv :<C-u>vs<CR> " ウィンドウを垂直分割
nnoremap sq :<C-u>q<CR> " ウィンドウを閉じる

" バッファ
nnoremap sN :<C-u>bn<CR> " 次のバッファへ移動
nnoremap sP :<C-u>bp<CR> " 前のバッファへ移動
nnoremap sQ :<C-u>bd<CR> " バファを閉じる

" タブ
nnoremap st :<C-u>tabnew<CR> " 新しいタブを開く
nnoremap sx :tabclose<CR> " tx タブを閉じる

" カーソル下のキーワードをバッファ内全体で置換する
" http://vim-users.jp/2009/08/hack62/
nnoremap <expr> s* ':%substitute/\<' . expand('<cword>') . '\>/'


" Insert Mode

" 挿入モードでのカーソル移動
inoremap <C-f> <C-o>l
inoremap <C-b> <C-o>h
inoremap <C-j> <C-o>j
inoremap <C-k> <C-o>k
inoremap <C-e> <C-o>A
inoremap <C-a> <C-o>I

" 挿入モードで文字列の削除
inoremap <C-w> <Esc>bdwa
inoremap <C-u> <Esc>d0
inoremap <C-k> <C-o>C

" insertモードから抜ける
inoremap <silent> jj <ESC>
inoremap <silent> kk <ESC>

" insert synbol
inoremap ;<CR> <end>;
inoremap ;;<CR> <C-e><down><end>;
inoremap ,<CR> <end>,
inoremap :<CR> <end>:

" VISUAL MODE
vnoremap <silent> > >gv
vnoremap <silent> < <gv

" 連番を入力
nnoremap <silent> co :ContinuousNumber <C-a><CR>
vnoremap <silent> co :ContinuousNumber <C-a><CR>
command! -count -nargs=1 ContinuousNumber let c = col('.')|for n in range(1, <count>?<count>-line('.'):1)|exec 'normal! j' . n . <q-args>|call cursor('.', c)|endfor
"}}}

" set"{{{

" 画面表示の設定

set number         " 行番号を表示する
set laststatus=2   " ステータス行を常に表示
set cmdheight=1    " メッセージ表示欄を2行確保
set showmatch      " 対応する括弧を強調表示
set matchtime=1 "showmatch時のカーソルが飛ぶ時間を0.1秒の何倍かで設定
set foldmethod=marker " {{{}}}でフォールディング（折りたたみ）を有効
set showcmd   " 入力途中のコマンドをウィンドウの右下に表示
set display=lastline " 一行の文字数が多くても描画

" タブ/インデントの設定

set expandtab     " タブ入力を複数の空白入力に置き換える
set tabstop=2     " 画面上でタブ文字が占める幅
set shiftwidth=2  " 自動インデントでずれる幅
set softtabstop=2 "連続した空白に対してタブキーやバックスペースキーでカーソルが動く幅
set autoindent    " 改行時に前の行のインデントを継続する
set smartindent   "改行時に入力された行の末尾に合わせて次の行のインデントを増減する

" カーソル移動関連の設定

set backspace=indent,eol,start " Backspaceキーの影響範囲に制限を設けない
set whichwrap=b,s,h,l,<,>,[,]  " 行頭行末の左右移動で行をまたぐ
set scrolloff=8                " 上下8行の視界を確保
set sidescrolloff=16           " 左右スクロール時の視界を確保
set sidescroll=1               " 左右スクロールは一文字づつ行う

" ファイル処理関連の設定

set confirm    " 保存されていないファイルがあるときは終了前に保存確認
set hidden     "保存されていないファイルがあるときでも別のファイルを開くことが出来る
set autoread   "外部でファイルに変更がされた場合は読みなおす
set nobackup   " ファイル保存時にバックアップファイルを作らない
set noswapfile " ファイル編集中にスワップファイルを作らない

" 検索/置換の設定

set hlsearch   " 検索文字列をハイライトする
set incsearch  " インクリメンタルサーチを行う
set ignorecase " 大文字と小文字を区別しない
set smartcase  "大文字と小文字が混在した言葉で検索を行った場合に限り、大文字と小文字を区別する
set wrapscan   " 最後尾まで検索を終えたら次の検索で先頭に移る

" 動作環境との統合関連の設定

set clipboard+=unnamed,unnamedplus " OSのクリップボードをレジスタ指定無しで Yank, Put 出来るようにする
set mouse=a " マウスの入力を受け付ける
set ttymouse=xterm2 " ドラッグを有効
set omnifunc=syntaxcomplete#Complete " 自動補完を有効
set pumheight=10 " 補完メニューの高さ
set nrformats= " 数値の形式を10進数に設定

" コマンドラインの設定

set wildmenu wildmode=list:longest,full " コマンドラインモードでTABキーによるファイル名補完を有効にする

" ビープの設定

set visualbell t_vb= "ビープ音すべてを無効にする
set noerrorbells "エラーメッセージの表示時にビープを鳴らさない

" HELPの設定

set helpheight=999 " ヘルプを画面いっぱいに開く

"}}}

" language"{{{

" php

" 文字列中でSQL構文ハイライト
let php_sql_query = 1

" Baselibメソッドのハイライト
let php_baselib = 1

" 文字列中でHTML構文ハイライト
let php_htmlInStrings = 1

" ショートタグを無効化したいなら: >
let php_noShortTags = 1

" ] や ) の対応エラーをハイライト
let php_parent_error_close = 1

" 対応する閉じ括弧がない開き括弧 ( や [ が存在する場合、php終了タグをスキップ
let php_parent_error_open = 1

" クラスや関数の折り畳みを有効
let php_folding = 0

" すべてのPHPの行に対してインデントをする
let g:PHP_default_indenting = 0

"}}}

" autocmd  "{{{

augroup leav_paste_mode
  autocmd!
  autocmd InsertLeave * set nopaste "leave paste mode
augroup END


" Vue.js のシンタックスハイライトを有効にする
" https://github.com/posva/vim-vue#faq
autocmd BufRead,BufNewFile *.vue setlocal filetype=vue.html.javascript.css
autocmd FileType vue syntax sync fromstart

" 自動的にコメント文字列が挿入されるのをやめる
" https://gist.github.com/rbtnn/8540338
augroup auto_comment_off
  autocmd!
  autocmd BufEnter * setlocal formatoptions-=ro
augroup END

" 行番号の左側に余白を追加する
augroup numberwidth
  autocmd!
  autocmd BufEnter,WinEnter,BufWinEnter * let &l:numberwidth = len(line("$")) + 2
augroup END

" To clean extra whitespace using vim-better-whitespace
augroup claen_extra_whitespace
  autocmd!
  autocmd BufWritePre * :StripWhitespace
augroup END

"}}}

" command"{{{

" Json format by Jq command  "{{{
" http://qiita.com/tekkc/items/324d736f68b0f27680b8

function! s:Jq(...)
  if 0 == a:0
    let l:arg = "."
  else
    let l:arg = a:1
  endif
  execute "%! jq \"" . l:arg . "\""
endfunction

command! -nargs=? Jq call s:Jq(<f-args>)
nnoremap <Space>jq :Jq<Enter>

"}}}

" search dash document  "{{{

" http://qiita.com/yuyuchu3333/items/292e99a521a9653e75fb
function! s:dash(...)
  let ft = &filetype
  if &filetype == 'python'
    let ft = ft.'3'
  endif
  let ft = ft.':'
  let word = len(a:000) == 0 ? input('Dash search: ', ft.expand('<cword>')) : ft.join(a:000, ' ')
  call system(printf("open dash://'%s'", word))
endfunction

command! -nargs=* Dash call <SID>dash(<f-args>)
nnoremap <Space>d :Dash

"}}}

"}}}
